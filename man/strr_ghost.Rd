% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strr_ghost.R
\name{strr_ghost}
\alias{strr_ghost}
\title{Function to identify STR ghost hostels}
\usage{
strr_ghost(points, property_ID = property_ID, host_ID = host_ID,
  multi_date = TRUE, created = created, scraped = scraped,
  start_date = NULL, end_date = NULL, distance = 200,
  min_listings = 3, listing_type = listing_type,
  private_room = "Private room", EH_check = NULL, cores = 1,
  quiet = FALSE)
}
\arguments{
\item{points}{A data frame of STR listings with sf or sp point geometries in
a projected coordinate system.}

\item{property_ID}{The name of a character or numeric variable in the points
object which uniquely identifies STR listings.}

\item{host_ID}{The name of a character or numeric variable in the points
object which uniquely identifies STR hosts.}

\item{multi_date}{A logical scalar. Should the analysis be run for separate
dates (controlled by the `created`, `scraped`, `start_date` and `end_date`
arguments), or only run a single time, treating all listings as active?}

\item{created}{The name of a date variable in the points object which gives
the creation date for each listing. This argument is ignored if
`multi_date` is FALSE.}

\item{scraped}{The name of a date variable in the points object which gives
the last-scraped date for each listing. This argument is ignored if
`multi_date` is FALSE.}

\item{start_date}{A character string of format YYYY-MM-DD indicating the
first date for which to run the analysis. If NULL (default), all dates will
be used. This argument is ignored if `multi_date` is FALSE.}

\item{end_date}{A character string of format YYYY-MM-DD indicating the last
date for which to run the analysis. If NULL (default), all dates will be
used. This argument is ignored if `multi_date` is FALSE.}

\item{distance}{A numeric scalar. The radius (in the units of the CRS) of the
buffer which will be drawn around points to determine possible ghost hostel
locations.}

\item{min_listings}{A numeric scalar. The minimum number of listings to
be considered a ghost hostel.}

\item{listing_type}{The name of a character variable in the points
object which identifies private-room listings. Set this argument to FALSE
to use all listings in the `points` table.}

\item{private_room}{A character string which identifies the value of the
`listing_type` variable to be used to find ghost hostels. This field is
ignored if `listing_type` is FALSE.}

\item{EH_check}{A character string which identifies the value of the
`listing_type` variable to be used to check ghost hostels against possible
duplicate entire-home listings operated by the same host. If NULL
(default), the check will not be performed. This field is ignored if
`listing_type` is FALSE.}

\item{cores}{A positive integer scalar. How many processing cores should be
used to perform the computationally intensive intersection steps? The
implementation of multicore processing does not support Windows, so this
argument should be left with its default value of 1 in those cases.}

\item{quiet}{A logical vector. Should the function execute quietly, or should
it return status updates throughout the function (default)?}
}
\value{
The output will be a tidy data frame of identified ghost hostels,
  organized with the following fields: `ghost_ID`: an identifier for each
  unique ghost hostel cluster. `date`: the date on which the ghost hostel was
  detected, if the `created` and `scraped` arguments are supplied. `host_ID`
  (or whatever name was passed to the host_ID argument): The ID number of the
  host operating the ghost hostel. `listing_count`: how many separate
  listings comprised the ghost hostel. `housing_units`: an estimate of how
  many housing units the ghost hostel occupies, calculated as
  `ceiling(listing_count / 4)`. `property_IDs`: A list of the property_ID
  (or whatever name was passed to the property_ID argument) values from the
  listings comprising the ghost hostel. `EH_check`: if EH_check is not NULL,
  a list of possible entire-home listing duplicates. `data`: a nested tibble
  of additional variables present in the points object. `geometry`: the
  polygons representing the possible locations of each ghost hostel.
}
\description{
\code{strr_ghost} takes reported STR listing locations and identifies
possible "ghost hostels"--clusters of private-room STR listings operating in
a single building.
}
\details{
A function for probablistically assigning STR listings to administrative
geographies (e.g. census tracts) based on reported latitude/longitude.
The function works by combining a known probability density function (e.g.
Airbnb's spatial obfuscation of listing locations) with an additional source
of information about possible listing locations--either population or housing
densities.
}
