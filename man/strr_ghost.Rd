% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strr_ghost.R
\name{strr_ghost}
\alias{strr_ghost}
\title{Function to identify STR ghost hostels}
\usage{
strr_ghost(
  points,
  start_date = NULL,
  end_date = NULL,
  property_ID = property_ID,
  host_ID = host_ID,
  multi_date = TRUE,
  created = created,
  scraped = scraped,
  distance = 200,
  min_listings = 3,
  listing_type = listing_type,
  private_room = "Private room",
  EH_check = FALSE,
  entire_home = "Entire home/apt",
  quiet = FALSE
)
}
\arguments{
\item{points}{A data frame of STR listings with sf or sp point geometries in
a projected coordinate system. If the data frame does not have spatial
attributes, an attempt will be made to convert it to sf using
\code{\link{strr_as_sf}}. The result will be transformed into the Web
Mercator projection (EPSG: 3857) for distance calculations. To use a
projection more suitable to the data, supply an sf or sp object.}

\item{start_date}{A character string of format YYYY-MM-DD indicating the
first date for which to run the analysis. If NULL (default), all dates will
be used. This argument is ignored if `multi_date` is FALSE.}

\item{end_date}{A character string of format YYYY-MM-DD indicating the last
date for which to run the analysis. If NULL (default), all dates will be
used. This argument is ignored if `multi_date` is FALSE.}

\item{property_ID}{The name of a character or numeric variable in the points
object which uniquely identifies STR listings.}

\item{host_ID}{The name of a character or numeric variable in the points
object which uniquely identifies STR hosts.}

\item{multi_date}{A logical scalar. Should the analysis be run for separate
dates (controlled by the `created`, `scraped`, `start_date` and `end_date`
arguments), or only run a single time, treating all listings as
simultaneously active?}

\item{created}{The name of a date variable in the points object which gives
the creation date for each listing. This argument is ignored if
`multi_date` is FALSE.}

\item{scraped}{The name of a date variable in the points object which gives
the last-scraped date for each listing. This argument is ignored if
`multi_date` is FALSE.}

\item{distance}{A numeric scalar. The radius (in the units of the CRS) of the
buffer which will be drawn around points to determine possible ghost hostel
locations.}

\item{min_listings}{A numeric scalar. The minimum number of listings to
be considered a ghost hostel.}

\item{listing_type}{The name of a character variable in the points
object which identifies private-room listings. Set this argument to FALSE
to use all listings in the `points` table.}

\item{private_room}{A character string which identifies the value of the
`listing_type` variable to be used to find ghost hostels. This field is
ignored if `listing_type` is FALSE.}

\item{EH_check}{A logical scalar. Should ghost hostels be checked against
possible duplicate entire-home listings operated by the same host? This
field is ignored if `listing_type` is FALSE.}

\item{entire_home}{A character string which identifies the value of the
`listing_type` variable to be used to find possible duplicate entire-home
listings. This field is ignored if `listing_type` or `EH_check` are FALSE.}

\item{quiet}{A logical scalar. Should the function execute quietly, or should
it return status updates throughout the function (default)?}
}
\value{
The output will be a tidy data frame of identified ghost hostels,
  organized with the following fields: `ghost_ID`: an identifier for each
  unique ghost hostel cluster. `date`: the date on which the ghost hostel was
  detected, if the `created` and `scraped` arguments are supplied. `host_ID`
  (or whatever name was passed to the host_ID argument): The ID number of the
  host operating the ghost hostel. `listing_count`: how many separate
  listings comprised the ghost hostel. `housing_units`: an estimate of how
  many housing units the ghost hostel occupies, calculated as
  `ceiling(listing_count / 4)`. `property_IDs`: A list of the property_ID
  (or whatever name was passed to the property_ID argument) values from the
  listings comprising the ghost hostel. `EH_check`: if EH_check is not NULL,
  a list of possible entire-home listing duplicates. `data`: a nested tibble
  of additional variables present in the points object. `geometry`: the
  polygons representing the possible locations of each ghost hostel.
}
\description{
\code{strr_ghost} takes reported STR listing locations and identifies
possible "ghost hostels"--clusters of private-room STR listings operating in
a single building.
}
\details{
A function for identifying clusters of possible "ghost hostels"--clusters of
private-room STR listings operating in a single building. The function works
by intersecting the possible locations of listings operated by a single host
with each other, to find areas which could the common location of the
listings, and thus be one or more housing units subdivided into private rooms
rather than a set of geographically disparate listings. The function can
optionally run its analysis separately for each date within a time period,
and can also check for possible duplication with entire-home listings
operated by the same host.
}
